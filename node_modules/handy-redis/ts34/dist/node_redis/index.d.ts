import * as nodeRedis from "redis";
import { Commands } from "../generated/interface";
import { WrappedNodeRedisMulti } from "./multi";
export interface WrappedNodeRedisClient extends Pick<Commands, Exclude<keyof Commands, "end" | "multi">> {
    nodeRedis: nodeRedis.RedisClient;
    /** @deprecated use `nodeRedis` */
    redis: nodeRedis.RedisClient;
    /** execMulti was removed in v2.x. Use `multi().exec()` instead. */
    readonly execMulti: never;
    multi(): WrappedNodeRedisMulti;
    batch(): WrappedNodeRedisMulti;
    end(flush?: boolean): void;
}
export interface CreateNodeRedisClient {
    (port_arg: number, host_arg?: string, options?: nodeRedis.ClientOpts): WrappedNodeRedisClient;
    (unix_socket: string, options?: nodeRedis.ClientOpts): WrappedNodeRedisClient;
    (options?: nodeRedis.ClientOpts): WrappedNodeRedisClient;
    (redisClient: nodeRedis.RedisClient): WrappedNodeRedisClient;
}
/** add a command that isn't included by default in node_redis e.g. `addCommand('lpos')` */
export declare const addNodeRedisCommand: (command: string) => void;
export declare const createNodeRedisClient: CreateNodeRedisClient;
