"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.FSAdapter = void 0;
var fs_1 = require("fs");
var BaseAdapter_1 = require("./BaseAdapter");
var FSAdapter = /** @class */ (function (_super) {
    __extends(FSAdapter, _super);
    function FSAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FSAdapter.prototype.set = function (value) {
        fs_1.writeFileSync("./" + this.opts.defaultDir + "/" + this.opts.databaseName + ".json", value);
        var data = JSON.parse(value);
        return data;
    };
    FSAdapter.prototype.get = function () {
        var file = fs_1.readFileSync("./" + this.opts.defaultDir + "/" + this.opts.databaseName + ".json", "utf-8");
        var data = JSON.parse(file);
        return data;
    };
    FSAdapter.prototype.destroy = function () {
        fs_1.unlinkSync("./" + this.opts.defaultDir + "/" + this.opts.databaseName);
        return true;
    };
    FSAdapter.prototype.init = function () {
        if (!fs_1.existsSync("./" + this.opts.defaultDir)) {
            fs_1.mkdirSync("./" + this.opts.defaultDir);
        }
        if (!fs_1.existsSync("./" + this.opts.defaultDir + "/" + this.opts.databaseName + ".json")) {
            fs_1.writeFileSync("./" + this.opts.defaultDir + "/" + this.opts.databaseName + ".json", "{}");
        }
    };
    return FSAdapter;
}(BaseAdapter_1.BaseAdapter));
exports.FSAdapter = FSAdapter;
