import { Client } from "discord.js";
export interface IEmoji {
    emoji: string;
    add_message?: string;
    remove_message?: string;
    roles: string[];
}
export interface IMessage {
    channel_id: string;
    message_id: string;
    limit: number;
    type: "regular" | "once" | "remove" | "voice";
    emojis: IEmoji[];
}
export interface IConfig {
    [message_id: string]: IMessage;
}
export declare type TOnGetFN = () => Promise<IConfig | undefined>;
export declare type TOnSetFN = (new_data: IConfig) => Promise<void>;
export declare type TOnDeleteFN = (message_id: string) => Promise<void>;
export declare class ReactionRole extends Client {
    private _token;
    private mongodb_uri?;
    private config;
    private logging;
    private ready;
    private on_get?;
    private on_set?;
    private on_delete?;
    constructor(token: string, mongodb_uri?: string, logging?: boolean);
    onGet(on_get: TOnGetFN): ReactionRole;
    onSet(on_set: TOnSetFN): ReactionRole;
    onDelete(on_delete: TOnDeleteFN): ReactionRole;
    createOption(emoji: string, roles: string[], add_message?: string, remove_message?: string): IEmoji;
    createMessage(channel_id: string, message_id: string, limit: number, ...emojis: IEmoji[]): Promise<IMessage>;
    deleteMessage(message_id: string): Promise<IConfig>;
    importConfig(config: IConfig): Promise<IConfig>;
    exportConfig: () => IConfig;
    init(): Promise<string>;
    reInit(): Promise<ReactionRole>;
}
